To create a simplistic progressive web app (PWA) to play Taboo with friends, we will use HTML, CSS, and JavaScript. The app will be a single-page application that can be installed on the user's home screen and work offline. We will use a service worker to cache the necessary files for offline use.

Here are the core files and their purposes:

1. `index.html`: The main HTML document that users will load. It will contain the structure of the Taboo card.
2. `styles.css`: The CSS file for styling the Taboo card and the overall look of the app.
3. `script.js`: The JavaScript file that will handle the logic of displaying a new Taboo card, including the word to guess and the list of taboo words.
4. `manifest.json`: The web app manifest file that provides information about the application (name, icons, etc.) and allows it to be installed on the home screen.
5. `service-worker.js`: The service worker file that will handle caching of assets for offline use.
6. `taboo-words.json`: A JSON file containing an array of objects with the word to guess and its associated taboo words.

Let's start by creating these files:

index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taboo Game</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="manifest" href="manifest.json">
</head>
<body>
    <div id="card" class="taboo-card">
        <div id="word-to-guess" class="word-to-guess"></div>
        <ul id="taboo-words-list" class="taboo-words-list"></ul>
        <button id="next-card" class="next-card-btn">Next Card</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
```

styles.css
```css
body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f7f7f7;
}

.taboo-card {
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 10px;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.word-to-guess {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
}

.taboo-words-list {
    list-style-type: none;
    padding: 0;
}

.taboo-words-list li {
    margin-bottom: 10px;
}

.next-card-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
}

.next-card-btn:hover {
    background-color: #0056b3;
}
```

script.js
```javascript
document.addEventListener('DOMContentLoaded', () => {
    const wordToGuessElement = document.getElementById('word-to-guess');
    const tabooWordsListElement = document.getElementById('taboo-words-list');
    const nextCardButton = document.getElementById('next-card');

    nextCardButton.addEventListener('click', loadNewTabooCard);

    function loadNewTabooCard() {
        fetch('taboo-words.json')
            .then(response => response.json())
            .then(tabooCards => {
                const randomIndex = Math.floor(Math.random() * tabooCards.length);
                const card = tabooCards[randomIndex];
                displayTabooCard(card);
            })
            .catch(error => console.error('Error loading taboo cards:', error));
    }

    function displayTabooCard(card) {
        wordToGuessElement.textContent = card.word;
        tabooWordsListElement.innerHTML = '';
        card.tabooWords.forEach(tabooWord => {
            const listItem = document.createElement('li');
            listItem.textContent = tabooWord;
            tabooWordsListElement.appendChild(listItem);
        });
    }

    // Initially load a taboo card
    loadNewTabooCard();
});

if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js').then(registration => {
            console.log('ServiceWorker registration successful with scope:', registration.scope);
        }, err => {
            console.log('ServiceWorker registration failed:', err);
        });
    });
}
```

manifest.json
```json
{
    "short_name": "Taboo",
    "name": "Taboo Game",
    "icons": [
        {
            "src": "favicon.ico",
            "sizes": "64x64 32x32 24x24 16x16",
            "type": "image/x-icon"
        }
    ],
    "start_url": ".",
    "display": "standalone",
    "orientation": "portrait",
    "background_color": "#ffffff",
    "theme_color": "#007bff"
}
```

service-worker.js
```javascript
const CACHE_NAME = 'taboo-game-cache-v1';
const urlsToCache = [
    '/',
    '/index.html',
    '/styles.css',
    '/script.js',
    '/taboo-words.json',
    '/favicon.ico'
];

self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log('Opened cache');
                return cache.addAll(urlsToCache);
            })
    );
});

self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                if (response) {
                    return response;
                }
                return fetch(event.request);
            }
        )
    );
});
```

taboo-words.json
```json
[
    {
        "word": "Beach",
        "tabooWords": ["Sand", "Ocean", "Sun", "Swim", "Towel"]
    },
    {
        "word": "Computer",
        "tabooWords": ["Keyboard", "Mouse", "Monitor", "Internet", "Program"]
    }
    // Add more taboo cards as needed
]
```

favicon.ico
You will need to create a favicon.ico file and place it in the root directory of your project. This icon will be used in the manifest and displayed on the home screen when the app is installed.

This concludes a fully working implementation.